package pnm

import (
	"bytes"
	"compress/gzip"
	"image"
	_ "image/png"
	"os"
	"path/filepath"
	"testing"
)

func TestEncode(t *testing.T) {
	savePpm(t, png1(), "ba", BitmapAscii)
	savePpm(t, png1(), "bb", BitmapBinary)
	savePpm(t, png2(), "ga", GraymapAscii)
	savePpm(t, png2(), "gb", GraymapBinary)
	savePpm(t, png3(), "pa", PixmapAscii)
	savePpm(t, png3(), "pb", PixmapBinary)
}

func savePpm(t *testing.T, img image.Image, name string, ptype PNMType) {
	fd, err := os.Create(filepath.Join("testdata", name+".ppm"))
	if err != nil {
		return
	}

	defer fd.Close()

	err = Encode(fd, img, ptype)
	if err != nil {
		t.Fatalf("Encode %s: %v", name, err)
	}
}

func png1() image.Image {
	return load([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xea, 0x0c,
		0xf0, 0x73, 0xe7, 0xe5, 0x92, 0xe2, 0x62, 0x60, 0x60, 0xe0, 0xf5, 0xf4,
		0x70, 0x09, 0x02, 0xd2, 0x6c, 0x40, 0xcc, 0xc5, 0x01, 0x22, 0xa7, 0xf3,
		0xe9, 0x1b, 0x03, 0x29, 0x2d, 0x4f, 0x17, 0xc7, 0x90, 0x8a, 0x39, 0x49,
		0x49, 0x0e, 0xcc, 0xff, 0x1b, 0x19, 0x5c, 0x92, 0x3d, 0x0e, 0x30, 0xc4,
		0xaa, 0x24, 0xac, 0x73, 0x60, 0xef, 0x51, 0x60, 0x8a, 0x9c, 0x24, 0xc8,
		0x51, 0x30, 0xb3, 0xe9, 0x3e, 0x9f, 0x03, 0x50, 0xe1, 0xff, 0xff, 0x36,
		0xfc, 0x3c, 0x5c, 0x85, 0x1e, 0xcf, 0xce, 0x03, 0x39, 0x0c, 0x9e, 0xae,
		0x7e, 0x2e, 0xeb, 0x9c, 0x12, 0x9a, 0x00, 0x01, 0x00, 0x00, 0xff, 0xff,
		0x69, 0xb7, 0x04, 0x21, 0x63, 0x00, 0x00, 0x00,
	})
}

func png2() image.Image {
	return load([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xea, 0x0c,
		0xf0, 0x73, 0xe7, 0xe5, 0x92, 0xe2, 0x62, 0x60, 0x60, 0xe0, 0xf5, 0xf4,
		0x70, 0x09, 0x02, 0xd2, 0x12, 0x40, 0xcc, 0xce, 0x01, 0x24, 0x18, 0xcc,
		0xe7, 0x5c, 0xca, 0x02, 0x52, 0x3e, 0x9e, 0x2e, 0x8e, 0x21, 0x15, 0x73,
		0x92, 0x92, 0x0e, 0x30, 0x46, 0x48, 0xf4, 0x34, 0x3e, 0x89, 0x6c, 0x2b,
		0x52, 0xb8, 0x79, 0x72, 0x83, 0xb4, 0xc7, 0x2e, 0xa3, 0x3f, 0xec, 0x93,
		0x7a, 0x74, 0x14, 0x02, 0xd9, 0x36, 0x68, 0x30, 0x47, 0x88, 0xb0, 0x48,
		0x34, 0x16, 0x39, 0x70, 0x26, 0x6f, 0x08, 0xb1, 0x8c, 0xc8, 0x32, 0x8f,
		0x78, 0x65, 0x7f, 0x43, 0x63, 0x8d, 0xd5, 0x01, 0x21, 0x81, 0x00, 0xbe,
		0x69, 0xb7, 0x79, 0x27, 0x1f, 0xe6, 0x65, 0x60, 0x64, 0x60, 0xf8, 0xff,
		0x3f, 0x6d, 0x32, 0x9f, 0xef, 0xb3, 0x6f, 0x53, 0x7e, 0x80, 0xcc, 0xf7,
		0x74, 0xf5, 0x73, 0x59, 0xe7, 0x94, 0xd0, 0x04, 0x08, 0x00, 0x00, 0xff,
		0xff, 0x7e, 0xd8, 0x62, 0x72, 0x85, 0x00, 0x00, 0x00,
	})
}

func png3() image.Image {
	return load([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xea, 0x0c,
		0xf0, 0x73, 0xe7, 0xe5, 0x92, 0xe2, 0x62, 0x60, 0x60, 0xe0, 0xf5, 0xf4,
		0x70, 0x09, 0x02, 0xd2, 0xcc, 0x40, 0xcc, 0xc4, 0xc1, 0x04, 0x24, 0x85,
		0xc4, 0x3e, 0xfa, 0x02, 0x29, 0x49, 0x4f, 0x17, 0xc7, 0x90, 0x8a, 0x39,
		0x49, 0xbf, 0xce, 0x1f, 0x38, 0xc0, 0x70, 0xcc, 0xc7, 0x81, 0x8b, 0x45,
		0x52, 0x82, 0x91, 0x91, 0x81, 0xe1, 0xff, 0x7f, 0x7b, 0x21, 0x36, 0x86,
		0x3b, 0xeb, 0x0d, 0xbd, 0x80, 0x8a, 0x18, 0x3c, 0x5d, 0xfd, 0x5c, 0xd6,
		0x39, 0x25, 0x34, 0x01, 0x02, 0x00, 0x00, 0xff, 0xff, 0x47, 0xe6, 0x8c,
		0x35, 0x52, 0x00, 0x00, 0x00,
	})
}

func load(data []byte) image.Image {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))

	if err != nil {
		panic("Decompression failed: " + err.Error())
	}

	defer gz.Close()

	img, _, err := image.Decode(gz)
	if err != nil {
		panic(err)
	}

	return img
}
